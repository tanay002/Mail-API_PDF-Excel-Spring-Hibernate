package QueryUse;

import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.AnnotationConfiguration;

public class Factory {

	public static void main(String[] args) {

		
		 /* Productdto d=new Productdto(); 
		  d.setPrice(54000);
		  d.setProName("Lenovo");
		 */
		AnnotationConfiguration con = new AnnotationConfiguration();
		con.configure("QueryConfigue.cfg.xml");
		SessionFactory sf = con.buildSessionFactory();
		Session ses = sf.openSession();
		Transaction tx = ses.beginTransaction();

		/*
		 * Query qry = ses.
		 * createQuery("insert into ProductDto(productId,proName,price)select i.itemId,i.itemName,i.itemPrice from ItemDto i where i.itemId= ?"
		 * );
		 */

		/*
		All data select
		   Query qry = ses.createQuery("from Productdto");
	
		*	List list =qry.list();
		
		for(Object o:list){
	     Productdto pt=(Productdto)o;
		System.out.println(pt);
			
		}
	
		*
		*
		*/

		/*
		 //Select Singele Record Query qry =
		Query qry =ses.createQuery("select sum(price) from Productdto");
		List list =qry.list();
		System.out.println(list);
		*/ 

		
		
	/*	 //Select  Record Query qry =using where clause
		
		String hql =" from Productdto where productId=:pId";
		
		Query query = ses.createQuery(hql);
		query.setDouble("pId",1);
		List l = query.list();
		for(Object o:l)
		{
		Productdto pt=(Productdto)o;
		System.out.println("price="+pt.getPrice()+"productName="+pt.getProName());
			
		}
	*/	

/*		
		//update date using hql query in database

		 Productdto d=new Productdto(); 

		//		Query query = ses.createQuery("Update Productdto set price =:price where productId= :id");

		Query query = ses.createQuery("Update Productdto set proName =:proName where productId= :id");
		query.setString("proName","Television");
				//query.setDouble("price",34000);
		query.setInteger("id", 1);
		int result = query.executeUpdate();
		System.out.println(result);
		
*/		
		/*System.out.println("price="+pt.getPrice()+"productName="+pt.getProName());
		
		
		for(Object o:result)
		{
		Productdto pt=(Productdto)o;
		System.out.println("price="+pt.getPrice()+"productName="+pt.getProName());
			
		}
		*/
		
		
		
		

	/*
	 * 
	 * multiple column select
	 * 
	 * 	Query qry = ses.createQuery("select proName,price from Productdto");
		
		List l =qry.list();
		System.out.println("Total Number Of Records : "+l.size());
		Iterator it = l.iterator();

		while(it.hasNext())
		{
			Object o[] = (Object[])it.next();

			System.out.println("Product Name : "+o[0]+ "Product Price : "+o[1]);

			System.out.println("----------------");
		}			

*/	
		
/*		
	//Delete data from database using hql query	
		 Productdto d=new Productdto(); 
		
		Query query=ses.createQuery("delete from Productdto where productId=:pid");
		query.setParameter("pid", 6);
		int rowsDeleted=query.executeUpdate();
		System.out.println(rowsDeleted);
		
*/		
		/*
//orderBy column using hql query 
		 Productdto d=new Productdto(); 

		
			Query qry = ses.createQuery("from Productdto as p order by p.price desc");
		
			List list =qry.list();
			System.out.println("Total Number Of Records : "+list.size());
				
			for(Object o:list)
			{
			Productdto pt=(Productdto)o;
			System.out.println("price="+pt.getPrice()+"productName="+pt.getProName());
				
			}
*/		
		
/*
	//	orderBy column using hql query 
		 Productdto d=new Productdto(); 

		
			Query qry = ses.createQuery("from Productdto as p order by p.price desc");
		
			List list =qry.list();
			System.out.println("Total Number Of Records : "+list.size());
				
			for(Object o:list)
			{
			Productdto pt=(Productdto)o;
			System.out.println("price="+pt.getPrice()+"productName="+pt.getProName());
				
			}
*/
		
/*
		String hql = "select p.proName, max(price) from Productdto as p group by p.proName"
				+ " having avg(p.price) > 9000";
		Query qry = ses.createQuery(hql);
		
		//List list =qry.list();
			
	     List list= (List)qry.list();
	 	System.out.println("Total Number Of Records : "+list.size());
	 	
	 	
	 	for(int i=0; i<list.size(); i++) {
			Object[] o= (Object[]) list.get(i);
			System.out.println("Product Name : "+o[0]+ "Product Price : "+o[1]);

		}

*/	 	

/*		
		//group by 
		String hql = "SELECT proName, COUNT(proName) FROM Productdto GROUP BY proName";
		  Query query = ses.createQuery(hql);
		    
		  for(Iterator it=query.iterate();it.hasNext();)
		  {
		   Object[] o = (Object[]) it.next();
		   System.out.println("Product Name : "+o[0]+ "        "+o[1]);
}
*/		
		
		/*SELECT c.currency, SUM(c.population)
		FROM Country c
		WHERE 'Europe' MEMBER OF c.continents
		GROUP BY c.currency
		HAVING COUNT(c) > 1
		Th*/
		
		//could not execute
		//Query qry = ses.createQuery("select proName,sum(price) FROM Productdto GROUP BY proName HAVING price>9000");
    	
		
/*//execute
	  Query qry = ses.createQuery(" FROM Productdto GROUP BY proName HAVING price>9000");
	    		 	
	      List list= (List)qry.list();
	      System.out.println("Total Number Of Records : "+list.size());
			for(Object o:list)
			{
				System.out.println("Come in side list"); 	
						
			Productdto pt=(Productdto)o;
			System.out.println("price="+pt.getPrice()+"productName="+pt.getProName());	
			}
	      		
*/		
		
	//join Query	
		 /*Query qry = ses.createQuery(" FROM Productdto p join Itemdto1 i on p.itemId=i.pid");
		 	
	      List list= (List)qry.list();
	      System.out.println("Total Number Of Records : "+list.size());
			for(Object o:list)
			{
				System.out.println("Come in side list"); 	
						
			Productdto pt=(Productdto)o;
			System.out.println("price="+pt.getPrice()+"productName="+pt.getProName());	
			}
		*/
			
			String hql = "from Productdto p inner join Itemdto1 i ON p.price=i.itemPrice where i.itemId=3 AND p.productId=3";
			
			Query query = ses.createQuery(hql);
			List<Object[]> listResult = query.list();
			
			for (Object[] aRow : listResult) {
			Productdto product = (Productdto) aRow[0];
			Itemdto1 item = (Itemdto1) aRow[1];
			System.out.println("price="+product.getPrice()+"   "+"productName="+product.getProName());	
			System.out.println("Item Price="+item.getItemPrice()+"   "+"Item Name="+item.getItemName());	
			
		
			
			
		
	//ses.save(d);
	tx.commit();
		ses.close();
		System.out.println("Done");

	}

}}